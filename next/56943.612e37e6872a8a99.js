(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[56943],{56943:n=>{n.exports="import {AsyncPipe} from '@angular/common';\nimport {Component, inject} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {TuiAmountPipe} from '@taiga-ui/addon-commerce';\nimport type {TuiPopover} from '@taiga-ui/cdk';\nimport type {TuiAlertOptions} from '@taiga-ui/core';\nimport {TuiAlertService, TuiButton, TuiLink} from '@taiga-ui/core';\nimport {POLYMORPHEUS_CONTEXT, PolymorpheusComponent} from '@taiga-ui/polymorpheus';\nimport {switchMap, takeUntil} from 'rxjs';\n\n@Component({\n    standalone: true,\n    exportAs: \"Example4\",\n    imports: [AsyncPipe, TuiButton, TuiLink, TuiAmountPipe],\n    template: `\n        <span tuiSubtitle>\n            <em>Your balance:</em>\n            {{ value | tuiAmount: 'RUB' | async }}\n        </span>\n        <div>\n            <button\n                tuiButton\n                type=\"button\"\n                (click)=\"context.completeWith(value)\"\n            >\n                Submit\n            </button>\n            <button\n                tuiLink\n                type=\"button\"\n                (click)=\"increaseBalance()\"\n            >\n                Increase\n            </button>\n        </div>\n    `,\n    changeDetection,\n})\nexport class AlertExampleWithData {\n    protected readonly context =\n        inject<TuiPopover<TuiAlertOptions<number>, number>>(POLYMORPHEUS_CONTEXT);\n\n    protected value = this.context.data;\n\n    protected increaseBalance(): void {\n        this.value += 10;\n    }\n}\n\n@Component({\n    standalone: true,\n    imports: [TuiButton],\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    private readonly alerts = inject(TuiAlertService);\n    private readonly notification = this.alerts\n        .open<number>(new PolymorpheusComponent(AlertExampleWithData), {\n            label: 'Heading is so long that it should be shown in two lines of text',\n            data: 237,\n            appearance: 'warning',\n            autoClose: 0,\n        })\n        .pipe(\n            switchMap((response) =>\n                this.alerts.open(`Got a value â€” ${response}`, {label: 'Information'}),\n            ),\n            takeUntil(inject(Router).events),\n        );\n\n    protected showNotification(): void {\n        this.notification.subscribe();\n    }\n}\n"}}]);