(self.webpackChunk_taiga_ui_components=self.webpackChunk_taiga_ui_components||[]).push([[11453],{11453:n=>{n.exports="import {\n    ChangeDetectionStrategy,\n    Component,\n    Inject,\n    OnInit,\n    Self,\n    ViewChild,\n} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {\n    tuiCardNumberValidator,\n    tuiDefaultCardValidator,\n    TuiInputCardGroupedComponent,\n} from '@taiga-ui/addon-commerce';\nimport {TUI_IS_IOS, TuiDestroyService, TuiValuesOf} from '@taiga-ui/cdk';\nimport {TuiDialogContext} from '@taiga-ui/core';\nimport {POLYMORPHEUS_CONTEXT} from '@tinkoff/ng-polymorpheus';\nimport {BehaviorSubject} from 'rxjs';\nimport {map, switchMap, takeUntil} from 'rxjs/operators';\n\nimport {\n    AccountCard,\n    DataForPayCardModal,\n    FetchedCards,\n    PaymentMode,\n} from '../helpers/models';\nimport {PayService} from '../helpers/pay.service';\nimport {inputCardGroupedCVCValidator} from '../helpers/validator';\n\n@Component({\n    selector: 'pay-modal',\n    templateUrl: './pay-modal.component.html',\n    styleUrls: ['./pay-modal.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TuiDestroyService],\n})\nexport class PayModalComponent implements OnInit {\n    @ViewChild('cardGroupedInput')\n    private readonly cardGroupedInput?: TuiInputCardGroupedComponent;\n\n    readonly form = new FormGroup({\n        card: new FormControl(null, [\n            Validators.required,\n            inputCardGroupedCVCValidator(),\n        ]),\n        saveCard: new FormControl(true),\n    });\n\n    cards: AccountCard[] = [];\n    paymentMode: TuiValuesOf<typeof PaymentMode> = PaymentMode.ByNewCard;\n    loading$ = new BehaviorSubject(false);\n    payProcessing$ = new BehaviorSubject(false);\n    amount: number = this.context?.data?.amount ?? 0;\n    readonly PAYMENT_MODE = PaymentMode;\n\n    constructor(\n        @Inject(POLYMORPHEUS_CONTEXT)\n        readonly context: TuiDialogContext<void, DataForPayCardModal>,\n        @Inject(TUI_IS_IOS) readonly iOS: boolean,\n        @Inject(PayService) private readonly payService: PayService,\n        @Self() @Inject(TuiDestroyService) private readonly destroy$: TuiDestroyService,\n    ) {}\n\n    ngOnInit(): void {\n        this.fetchCardsAndSetPrimaryCard();\n    }\n\n    payBySelectedCard(card: AccountCard): void {\n        this.form.patchValue({\n            card: {card: this.maskedNumber(card), expire: '**/**', cvc: ''},\n        });\n\n        this.form.controls.card.removeValidators(tuiCardNumberValidator);\n        this.paymentMode = PaymentMode.BySavedCard;\n        this.cardGroupedInput?.focusCVC();\n    }\n\n    payByNewCard(): void {\n        this.form.patchValue({card: null});\n        this.form.controls.card.addValidators(tuiCardNumberValidator);\n        this.paymentMode = PaymentMode.ByNewCard;\n        this.cardGroupedInput?.focusCard();\n    }\n\n    pay(): void {\n        if (!this.form.controls.card.valid) {\n            return;\n        }\n\n        this.payProcessing$.next(true);\n        this.payService\n            .pay()\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(\n                () => {\n                    this.payProcessing$.next(false);\n                    this.context.$implicit.complete();\n                },\n                () => this.payProcessing$.next(false),\n            );\n    }\n\n    cardValidator(card: string): boolean {\n        return tuiDefaultCardValidator(card) && card.length === 16;\n    }\n\n    private maskedNumber(savedCard: AccountCard): string {\n        return `${savedCard.firstSix.toString().slice(0, -2)}***${savedCard.lastFour}`;\n    }\n\n    private fetchCardsAndSetPrimaryCard(): void {\n        this.loading$.next(true);\n        this.payService\n            .preparePayment(this.context.data.amount)\n            .pipe(\n                switchMap(amount =>\n                    this.payService\n                        .getPrimaryCard()\n                        .pipe(map(data => [amount, data] as [number, FetchedCards])),\n                ),\n                takeUntil(this.destroy$),\n            )\n            .subscribe({\n                next: ([, data]: [number, FetchedCards]) => {\n                    this.cards = data.cards;\n\n                    if (data.primary) {\n                        this.payBySelectedCard(data.primary);\n                    } else {\n                        this.payByNewCard();\n                    }\n                },\n                complete: () => this.loading$.next(false),\n            });\n    }\n}\n"}}]);